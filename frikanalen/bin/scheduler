#!/usr/bin/perl -w

# Author: Petter Reinholdtsen
# Date: 2009-10-15
# License: GNU General Public license v2 or later
#
# Generer detaljert tidsplan for streaming basert på EPG-fil hentet
# fra frikanalen.
#
# http://wiki.nuug.no/grupper/video/pubfrikanalen

use strict;
use warnings;

use XML::Simple;
use Data::Dumper;
use LWP::UserAgent;
use Date::Parse;
use GD;
use POSIX;
# SOAP:Lite mÃ¥ modifiseres til Ã¥ gjÃ¸re ting pÃ¥ MS mÃ¥ten :-/
use SOAP::Lite  on_action => sub {sprintf '%s/%s', @_}, ;

binmode STDOUT, ":utf8";

my $listref = get_epglist();

my @events = ();
for my $url (@{$listref}) {
#    print "Loading '$url'\n";
    my $ua = new LWP::UserAgent;
    my $req = new HTTP::Request GET => $url;
    my $res = $ua->request($req);
    my $epgref = XMLin($res->content);
    for my $event (@{$epgref->{event}}) {
#        print Dumper($event);
        my $now = time();

        my $start = $event->{'start'};
        my $starttime = str2time($start);
        my $stop = $event->{'stop'};
        my $stoptime = str2time($stop);

        # Ignore if more than two days ahead, or stopped in the past
        next if $starttime > $now + 2 * 24 * 60 * 60;
        next if $stoptime < $now;

        # Why do this test fail to keep entries with no start entry
        # from the @events array.
        if ($event->{'start'} && $event->{'contentId'}) {

# EPG contentId = fetchvideo.cgi videoId
# http://www.nuug.no/pub/video/frikanalen/fetchvideo.cgi?videoId=4449
            my $baseurl = "http://www.nuug.no/pub/video/frikanalen";
            my $videoId = $event->{'contentId'};
            my $ogvurl = "$baseurl/${videoId}.ogv";
            $event->{'ogvurl'}  = $ogvurl;
            $event->{'pageurl'} = "$baseurl/fetchvideo.cgi?videoId=$videoId";

            my $ua = new LWP::UserAgent;
            my $req = new HTTP::Request HEAD => $ogvurl;
            my $res = $ua->request($req);
            if ($res->is_success) {
                push @events, $event;
            } else {
                my $title = $event->{'title'};
                print "error: Missing $ogvurl ($title), not scheduling\n";
            }
        } else {
            print "Empty event: ", Dumper($event);
        }
    }
}

my $vlc = vlc_start();

# Stop vlc on exit
$SIG{EXIT} = sub { my $pid = $vlc->{pid}; print "Killing $pid\n"; kill $pid; };

@events = sort start_order @events;
my $seq = 0;
while ($seq < scalar @events) {
    my $event = $events[$seq];
    my $now = time();
    my $start = $event->{'start'};
    my $starttime = str2time($start);
    my $stoptime = str2time($event->{stop});

    # Skip entries from the past
    if ($starttime >= $now) {
        my $wait = $starttime - $now;
        my $title = $event->{'title'};
        print "Waiting $wait seconds to start '$title' $start\n";
        show_program($vlc, $seq);
        sleep $wait;
        process_event($vlc, $event);
    } elsif ($stoptime >= $now && $starttime <= $now) {
        # If some program is already running, just start it to get
        # something showing.
        process_event($vlc, $event);
    }
    $seq++;
}

sub show_program {
    my ($vlc, $startseq) = @_;

    my $im = new GD::Image(720,576); # PAL
    my $white = $im->colorAllocate(255,255,255);
    my $black = $im->colorAllocate(  0,  0,  0);
    my $fontsize = 20;
    my $left = 0;
    my $font = "/usr/share/fonts/truetype/msttcorefonts/arial.ttf";
    $im->fill(50,50,$white);
    my @bounds =
        $im->stringFT($black,$font,$fontsize*2,$left,30,50,"Frikanalen");

    $bounds[1] += 100; # Move rest of the text down on the screen

    my $seq = 0;
    my $date = "";
    while ($seq < 5) {
        my $event = $events[$startseq + $seq];
        my $title = $event->{'title'};
        my $start = $event->{'start'};
        my $starttime = str2time($start);
        my $timestring = strftime("%H:%M", localtime($starttime));
        my $datestring = strftime("%Y-%m-%d", localtime($starttime));
        if ($date ne $datestring) {
            my $infostring = "$datestring";
            print "  $infostring\n";
            @bounds = $im->stringFT($black,$font,$fontsize,$left,
                                    150, $bounds[1] + $fontsize * 2, "$infostring");
            $date = $datestring;
        }
        my $infostring = "$timestring - $title";
        print "  $infostring\n";
        @bounds = $im->stringFT($black,$font,$fontsize,$left,
                                150, $bounds[1] + $fontsize * 2, "$infostring");
        $seq++;
    }

    if (open(PNG, ">", "test.png")) {
        print "Generate pause screen DV\n";
        print PNG $im->png;
        close(PNG);
        my $len = 10 * 25; # 10 seconds in frames (25 frames/second)
        # use image2raw from package smilutils
        system("image2raw -r $len test.png > test.dv");
        # Generate Ogg Theora, VLC do not understand raw DV

        system("ffmpeg2theora --width 384 --height 288 -o test.ogv test.dv");
        print "Done generating pause screen DV\n";
        vlc_play($vlc, "test.ogv");
    } else {
        print "Unable to save test.png\n";
    }
}

sub start_order {
    my ($a, $b) = @_;

    # Try to figure out why some entries have no start entry, and why
    # the test above do not keep these from showing up here.
#    print "A: ", Dumper($a) unless defined $a->{'start'};
#    print "B: ", Dumper($b) unless defined $b->{'start'};
    return ($a->{'start'} || "") cmp ($b->{'start'} || "")
}

sub process_event {
    my ($vlc, $eventref) = @_;
#    print Dumper($eventref);

    my $videoId = $eventref->{'contentId'};
    if ($videoId) {
        my $pageurl = $eventref->{'pageurl'};
        my $ogvurl  = $eventref->{'ogvurl'};
        my $title = $eventref->{'title'};
        my $start = $eventref->{'start'};
        my $stop = $eventref->{'stop'};

        my $starttime = str2time($start);
        my $stoptime = str2time($stop);

        print "# [$start -> $stop] $title\n";
        print "$ogvurl\n";
        vlc_play($vlc, $ogvurl);
    } else {
#        print Dumper($eventref);
    }
}

exit 0;

###########################################

sub get_epglist {
    my $soap = new SOAP::Lite
        -> uri('http://tempuri.org')
        -> proxy('http://communitysite1.frikanalen.tv/CommunitySite/EpgWebService.asmx');
    my $res;
    my $obj = $soap->GetEpgUrls;
    unless ($obj->fault) {
        return $obj->result->{string};
    } else {
#        print Dumper($obj);
        print $obj->fault->{faultstring}, "\n";
        return undef;
    }
}


# Starting a VLC client/server with HTTP interface.  The telnet
# interface could be an alternative, but it only support streaming, so
# it is very good for initial testing.
# http://wiki.videolan.org/Documentation:Streaming_HowTo/VLM
sub vlc_start {
    my $vlc = {};
    my $pid = fork();
    if (not defined $pid) {
        return undef;
    } elsif (0 == $pid){
#    system("vlc", "--extraintf", "telnet", "--telnet-password", "secret");
        exec("vlc", "--extraintf", "http");
        exit 0;
    } else {
        $vlc->{url} = "http://localhost:8080/";
        $vlc->{pid} = $pid;
        sleep 5; # Give VLC some time to start
        return $vlc;
    }
}

sub vlc_play {
    my ($vlc, $file) = @_;

    $file =~ s#/#%2F#g;

    my $url = $vlc->{url} . "requests/status.xml?command=in_play&input=$file";
    print "Visiting '$url'\n";
    my $ua = new LWP::UserAgent;
    my $req = new HTTP::Request GET => $url;
    my $res = $ua->request($req);
    unless ($res->is_success) {
        print "Failed to contact VLC\n";
    }
}
