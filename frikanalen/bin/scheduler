#!/usr/bin/perl -w

# Author: Petter Reinholdtsen
# Date: 2009-10-15
# License: GNU General Public license v2 or later
#
# Generer detaljert tidsplan for streaming basert på EPG-fil hentet
# fra frikanalen.
#
# http://wiki.nuug.no/grupper/video/pubfrikanalen

use strict;
use warnings;

use XML::Simple;
use Data::Dumper;
use LWP::UserAgent;
use Date::Parse;
# SOAP:Lite mÃ¥ modifiseres til Ã¥ gjÃ¸re ting pÃ¥ MS mÃ¥ten :-/
use SOAP::Lite  on_action => sub {sprintf '%s/%s', @_}, ;

binmode STDOUT, ":utf8";

my $listref = get_epglist();

my %events = ();
for my $url (@{$listref}) {
#    print "Loading '$url'\n";
    my $ua = new LWP::UserAgent;
    my $req = new HTTP::Request GET => $url;
    my $res = $ua->request($req);
    my $epgref = XMLin($res->content);
#    print Dumper($epgref);
    for my $event (@{$epgref->{event}}) {
#        print Dumper($event);
        $events{$event->{start}} = $event;
    }
}

my $vlc = vlc_start();

for my $key (sort keys %events) {
    my $starttime = str2time($key);
    my $now = time();
    # Skip entries from the past
    if ($starttime >= $now) {
        my $wait = $starttime - $now;
        my $title = $events{$key}->{'title'};
        print "Waiting $wait seconds to start $title\n";
        sleep $wait;
        process_event($vlc, $events{$key});
    }
}

sub process_event {
    my ($vlc, $eventref) = @_;
#    print Dumper($eventref);

# EPG contentId = fetchvideo.cgi videoId
# http://www.nuug.no/pub/video/frikanalen/fetchvideo.cgi?videoId=4449
    my $baseurl = "http://www.nuug.no/pub/video/frikanalen";
    my $videoId = $eventref->{'contentId'};
    if ($videoId) {
        my $pageurl = "$baseurl/fetchvideo.cgi?videoId=$videoId";
        my $ogvurl  = "$baseurl/${videoId}.ogv";

        my $title = $eventref->{'title'};
        my $start = $eventref->{'start'};
        my $stop = $eventref->{'stop'};

        my $starttime = str2time($start);
        my $stoptime = str2time($stop);

        # Skip entries from the past
        return if ($stoptime < time());

        print "# [$start -> $stop] $title\n";
        print "$ogvurl\n";
        vlc_play($vlc, $ogvurl);
        sleep 10;
    } else {
#        print Dumper($eventref);
    }
}

exit 0;

###########################################

sub get_epglist {
    my $soap = new SOAP::Lite
        -> uri('http://tempuri.org')
        -> proxy('http://communitysite1.frikanalen.tv/CommunitySite/EpgWebService.asmx');
    my $res;
    my $obj = $soap->GetEpgUrls;
    unless ($obj->fault) {
        return $obj->result->{string};
    } else {
#        print Dumper($obj);
        print $obj->fault->{faultstring}, "\n";
        return undef;
    }
}


# Starting a VLC client/server with HTTP interface.  The telnet
# interface could be an alternative, but it only support streaming, so
# it is very good for initial testing.
# http://wiki.videolan.org/Documentation:Streaming_HowTo/VLM
sub vlc_start {
    my $vlc = {};
    my $pid = fork();
    if (not defined $pid) {
        return undef;
    } elsif (0 == $pid){
#    system("vlc", "--extraintf", "telnet", "--telnet-password", "secret");
        exec("vlc", "--extraintf", "http");
        exit 0;
    } else {
        $vlc->{url} = "http://localhost:8080/";
        $vlc->{pid} = $pid;
        sleep 5; # Give VLC some time to start
        return $vlc;
    }
}

sub vlc_play {
    my ($vlc, $file) = @_;

    $file =~ s#/#%2F#g;

    my $ua = new LWP::UserAgent;
    my $req = new HTTP::Request GET => $vlc->{url} .
        "requests/status.xml?command=in_play&input=$file";
    my $res = $ua->request($req);
}
